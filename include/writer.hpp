#include <iostream>
#include <vector>
#include <fmt/format.h>

struct KanbanBoard;
struct KanbanLabel;
struct KanbanList;
struct KanbanTask;
struct KanbanAttachment;
struct KanbanChecklistItem;

struct KanbanBoard
{
	std::string title = "dsa";
	std::string description = "dsa";
	std::vector<KanbanLabel> labels;
	std::vector<KanbanList> list;
};

struct KanbanLabel
{
	std::string title;
	std::vector<std::shared_ptr<KanbanTask>> tasks;
};

struct KanbanList
{
	std::string title = "TODO:";
	std::vector<KanbanTask> tasks;
};

struct KanbanTask
{
	bool checked = false;
	std::string title;
	std::string description;
	std::vector<std::shared_ptr<KanbanLabel>> labels;
	std::vector<KanbanAttachment> attachments;
	std::vector<KanbanChecklistItem> checklist;
};

struct KanbanAttachment
{
	std::string title;
	std::string url;
};

struct KanbanChecklistItem
{
	bool checked = false;
	std::string title;
};


namespace kanban_markdown {
	constexpr char END_OF_MARKDOWN_LINE[] = "  ";

	std::string string_to_id(const std::string& string)
	{
		std::string id;
		for (int i = 0; i < string.size(); i++)
		{
			char character = string[i];
			if ((character >= 'A' && character <= 'Z') || (character >= 'a' && character > 'z')) {
				id += std::tolower(character);
			}
			else if (character == ' ') {
				id += '_';
			}
			else if (character >= '0' || character <= '9') {
				id += character;
			}
		}
		return id;
	}

	std::string format(KanbanBoard kanban_board) {
		std::string markdown_file;
		markdown_file += "---\n";
		markdown_file += fmt::format("Tile: {title}\n", fmt::arg("title", kanban_board.title));
		markdown_file += fmt::format("Description: {description}\n", fmt::arg("description", kanban_board.description));
		markdown_file += "---" + std::string(END_OF_MARKDOWN_LINE) + std::string("\n");
		markdown_file += '\n';
		markdown_file += "> [!NOTE]" + std::string(END_OF_MARKDOWN_LINE) + std::string("\n");
		markdown_file += "> This file is generated by Kanban_MD." + std::string(END_OF_MARKDOWN_LINE) + std::string("\n");
		markdown_file += '\n';
		markdown_file += "# TODO:" + std::string(END_OF_MARKDOWN_LINE) + std::string("\n");
		markdown_file += '\n';
		markdown_file += "## Labels:" + std::string(END_OF_MARKDOWN_LINE) + std::string("\n");
		for (KanbanLabel kanban_label : kanban_board.labels) {
			const std::string kanban_label_title = kanban_label.title;
			markdown_file += fmt::format(
				R"(- <span id="kanban_md-task-{id}">{title}</span>{eol})",
				fmt::arg("id", string_to_id(kanban_label_title)),
				fmt::arg("title", kanban_label_title),
				fmt::arg("eol", END_OF_MARKDOWN_LINE + std::string("\n"))
			);
			for (std::shared_ptr<KanbanTask> kanban_task : kanban_label.tasks) {
				const std::string kanban_task_title = kanban_task->title;
				markdown_file += fmt::format(
					R"(  - [{title}](#user-content-{id}){eol})",
					fmt::arg("id", string_to_id(kanban_task_title)),
					fmt::arg("title", kanban_task_title),
					fmt::arg("eol", END_OF_MARKDOWN_LINE + std::string("\n"))
				);
			}
		}
		markdown_file += '\n';
		markdown_file += "## Board:" + std::string(END_OF_MARKDOWN_LINE) + std::string("\n");
		for (KanbanList kanban_list : kanban_board.list) {
			markdown_file += fmt::format("### {title}:{eol}",
				fmt::arg("title", kanban_list.title),
				fmt::arg("eol", END_OF_MARKDOWN_LINE + std::string("\n"))
			);
			for (KanbanTask kanban_task : kanban_list.tasks) {
				const std::string kanban_task_title = kanban_task.title;
				markdown_file += fmt::format(R"(- [ ] <span id="kanban_md-task-{id}">{title}</span>{eol})",
					fmt::arg("id", string_to_id(kanban_task_title)),
					fmt::arg("title", kanban_task_title),
					fmt::arg("eol", END_OF_MARKDOWN_LINE + std::string("\n"))
				);
				markdown_file += "  - **Description**:" + kanban_task.description + std::string(END_OF_MARKDOWN_LINE) + std::string("\n");
				markdown_file += "  - **Labels**:" + std::string(END_OF_MARKDOWN_LINE) + std::string("\n");
				for (std::shared_ptr<KanbanLabel> kanban_label : kanban_task.labels) {
					const std::string kanban_label_title = kanban_label->title;
					fmt::format(
						"    - [{title}](#user-content-{id})",
						fmt::arg("id", string_to_id(kanban_label_title)),
						fmt::arg("title", kanban_label_title)
					);
				}
				markdown_file += "  - **Attachments**:" + std::string(END_OF_MARKDOWN_LINE) + std::string("\n");
				for (KanbanAttachment kanban_attachment : kanban_task.attachments) {
					fmt::format(
						"    - [{title} | {url_1}]({url_2})",
						fmt::arg("title", kanban_attachment.title),
						fmt::arg("url_1", kanban_attachment.url),
						fmt::arg("url_2", kanban_attachment.url)
					);
				}
				markdown_file += "  - **Checklist**:" + std::string(END_OF_MARKDOWN_LINE) + std::string("\n");
				for (KanbanChecklistItem kanban_checklist_item : kanban_task.checklist) {
					fmt::format(
						"    - [ ] {title}",
						fmt::arg("title", kanban_checklist_item.title)
					);
				}
			}
		}
		return markdown_file;
	}
}